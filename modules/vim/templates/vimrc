" vim: filetype=vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call pathogen#infect()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible       " Use Vim settings instead of Vi settings. Must be first
set autoread           " Read a unchanged file if it's been changed outside vim
set number             " Display line numbers
set numberwidth=4      " Use 4 char line number area
set title              " Display filename as window title
set ruler              " Show the cursor position all the time
set showcmd            " Display incomplete commands as you type in statusbar
set mouse=a            " Enable mouse support

" Backup/swap related
set nobackup           " Don't make backup files
set nowritebackup
set backupdir=$TEMP,$TMP,.
set directory=$TEMP,$TMP,. " Put swap files in a seperate dir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color and Syntax
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=light
let g:zenburn_high_Contrast=1
colorscheme zenburn     " HighContrast version of the zenburn Color scheme

if has("gui_running")
  set guifont=Courier\ New\ 11
endif

syntax on
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backspace=indent,eol,start " allow backspacing over items
set scrolloff=3        " Always display 3 lines above/below cursor when scrolling

" Search behaviour
set incsearch          " Do incremental searching
set hlsearch           " Highlight search terms
set smartcase          " Do not ignore case when regex has upper case letters
set gdefault           " Default substitude all changes on a line
nnoremap <CR> :noh<CR><CR>

" Disable bells
set noerrorbells        
set novisualbell
set t_vb=

" Support tab completion when writing commands
set wildmode=list:longest,list:full
" set wildmode=longest,list,full
set wildignore+=*.pyc,*.class,*.sock,node_modules
let NERDTreeIgnore=['\.pyc$','\.class$','\.sock','node_modules']

autocmd InsertLeave * set nocursorline " no cursorline in normal mode
autocmd InsertEnter * set cursorline   " cursorline in insert mode
autocmd FileType help wincmd L         " Open help window in vertical split

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Move up and down in screen lines, not file lines:
nnoremap j gj
nnoremap k gk

" Split movement shortcuts:
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Shortcuts to save and close buffer
nmap ss :w<CR>
nmap qq :q<CR>

" Allow moving cursor past end of line in visual block mode:
set virtualedit+=block

" Keep search matches in the middle of the window:
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" Tab/shift-tab for indenting
vmap <Tab> >gv
vmap <S-Tab> <gv
imap <S-Tab> <C-o><<

" Better repeat
nmap . .`[

" Press ^F from insert mode to paste the default register
inoremap <C-F> <C-R>"

" Navigate location list, f.ex. after Ggrep
nnoremap <C-J> :cn<CR>
nnoremap <C-K> :cp<CR>

" Copy and paste to global register?
nnoremap <C-c> "+y<CR>
nnoremap <C-v> "+gP<CR>

" Rename token in file
nnoremap gr gD:%s/<C-R>///gc<left><left><left>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab      " expand tabs to spaces
set tabstop=2      " width of an actual tab char in spaces
set softtabstop=2  " width of an inserted tab char
set shiftwidth=2   " number of spaces for each indent
set smarttab       " inserts spaces according to shiftwidt when <TAB>

set encoding=utf-8 " Prefer utf-8 (on windows)
set ffs=unix,dos    " Prefer unix line endings
setglobal nobomb   " Disable BOM in start of files

autocmd Syntax * match Error /\%80v/  " mark lines over 80 columns

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Languages
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" JSON syntax highlighting:
au BufNewFile,BufRead *.json setlocal ft=javascript

" Less syntax highlighting
au BufNewFile,BufRead *.less setfiletype less

" Jinja template syntax hihlighting:
" au BufNewFile,BufRead *.html setlocal ft=jinja

" 4 spaces for Python:
au FileType python setl softtabstop=4 tabstop=4 shiftwidth=4

" Apply line wrapping for text files
autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Statusbar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline=%f%m%r%h%w\ %y\ [%{&ff}]
set statusline+=\ %{fugitive#statusline()}
set statusline+=\ %#StatusLineError#%{SyntasticStatuslineFlag()}%*
set statusline+=%=%-14.(%l,%c%V%)\ %L

set laststatus=2


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatically close syntastic error window when no errors are detected:
let g:syntastic_auto_loc_list=2

" Mark syntasitc errors:
let g:syntastic_enable_signs=1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Avoid pinky stretch for '\':
let mapleader = ","
let g:mapleader = ","

" Toggle line numbers:
nnoremap  <leader>n :set nonumber!<CR>

" Toggle display of invisible characters (like TextMate):
set listchars=tab:▸\ ,eol:¬,trail:.,extends:#,nbsp:.
nnoremap <leader>l :set list!<CR>

" Toggle paste mode for no autoindenting:
nnoremap <leader>p :set invpaste<CR>

" Opens an edit command with the path of the current file filled in
nnoremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the current file filled in
nnoremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Create vertical split and navigate to it:
nnoremap <leader>w <C-w>v<C-w>l

" Clear search highlights:
nnoremap <leader><space> :noh<CR>

" Open nerd tree
nnoremap <leader>f :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" always jump to the last known cursor position
augroup vimrcEx
  au!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

"Enable and disable mouse support
nnoremap <leader>m :call ToggleMouse()<CR>
function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
  else
    set mouse=a
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Load local config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if filereadable("vimrc.local")
  source vimrc.local
endif
